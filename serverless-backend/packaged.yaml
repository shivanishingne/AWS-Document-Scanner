AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'document-scanner

  '
Parameters:
  UserPoolID:
    Type: String
    Description: (Required) The user pool ID created by the Amplify frontend.
  AmplifyStackName:
    Type: String
    Description: (Required) The stack name of the Amplify backend deployment.
  BucketName:
    Type: String
    Description: (Required) A universally unique name for the user file bucket. Must be all lowercase. 
Globals:
  Api:
    Cors:
      AllowMethods: '''*'''
      AllowHeaders: '''*'''
      AllowOrigin: '''*'''
Resources:
  DocumentScannerAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolID}
            Identity:
              Header: Authorization
        AddDefaultAuthorizerToCorsPreflight: false
  UserFileBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName:
        Ref: BucketName
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - POST
          - HEAD
          - DELETE
          AllowedOrigins:
          - '*'
          ExposedHeaders:
          - x-amz-server-side-encryption
          - x-amz-request-id
          - x-amz-id-2
          - ETag
          MaxAge: 3000
          Id: S3CorsConfig
  GeneratePDF:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: python3.8
      CodeUri: s3://iot-test-mo/1087ee92f67613c0826d5dc82031a13a
      Layers:
      - Ref: FPDFLayer
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: PagesTable
      Environment:
        Variables:
          PAGES_TABLE_NAME:
            Ref: PagesTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId:
              Ref: DocumentScannerAPI
            Path: /pages/pdf/{project+}
            Method: get
  FPDFLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: document-scanner-dependencies
      Description: Dependencies for Document Scanner GeneratePDF function
      ContentUri: s3://iot-test-mo/b8df6ea31736a54df0f8488ba9946a96
      CompatibleRuntimes:
      - python3.8
      LicenseInfo: MIT
      RetentionPolicy: Retain
  ProcessDocument:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: python3.8
      CodeUri: s3://iot-test-mo/25b66df61e4cdb6aa7f5f32432c1a90f
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: PagesTable
      - TextractPolicy: {}
      - S3ReadPolicy:
          BucketName:
            Ref: BucketName
      Environment:
        Variables:
          PAGES_TABLE_NAME:
            Ref: PagesTable
      Events:
        ImageUpload:
          Type: S3
          Properties:
            Bucket:
              Ref: UserFileBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .png
  CreateProject:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: python3.8
      CodeUri: s3://iot-test-mo/25d78b87ad3d6cfe804dddbcc91cd07a
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ProjectsTable
      Environment:
        Variables:
          PROJECTS_TABLE_NAME:
            Ref: ProjectsTable
      Events:
        PostResource:
          Type: Api
          Properties:
            RestApiId:
              Ref: DocumentScannerAPI
            Path: /projects
            Method: post
  FetchPageCount:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: python3.8
      CodeUri: s3://iot-test-mo/169f0e4c049252b59817483614792f18
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: PagesTable
      Environment:
        Variables:
          PAGES_TABLE_NAME:
            Ref: PagesTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId:
              Ref: DocumentScannerAPI
            Path: /pages/count/{project+}
            Method: get
  DeleteProject:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: python3.8
      CodeUri: s3://iot-test-mo/a54237731a225988f293bffeed90037f
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ProjectsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: PagesTable
      - S3CrudPolicy:
          BucketName:
            Ref: UserFileBucket
      Environment:
        Variables:
          PROJECTS_TABLE_NAME:
            Ref: ProjectsTable
          PAGES_TABLE_NAME:
            Ref: PagesTable
          BUCKET_NAME:
            Ref: UserFileBucket
      Events:
        PostResource:
          Type: Api
          Properties:
            RestApiId:
              Ref: DocumentScannerAPI
            Path: /projects/delete
            Method: post
  FetchProjects:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: python3.8
      CodeUri: s3://iot-test-mo/4e9b09496e9f3178dec669337071468a
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ProjectsTable
      Environment:
        Variables:
          PROJECTS_TABLE_NAME:
            Ref: ProjectsTable
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId:
              Ref: DocumentScannerAPI
            Path: /projects
            Method: get
  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: username
        AttributeType: S
      - AttributeName: project_name
        AttributeType: S
      KeySchema:
      - AttributeName: username
        KeyType: HASH
      - AttributeName: project_name
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  PagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: project
        AttributeType: S
      - AttributeName: page
        AttributeType: N
      KeySchema:
      - AttributeName: project
        KeyType: HASH
      - AttributeName: page
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  UserFileBucketAuthRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:PutObject
          - s3:DeleteObject
          Resource:
          - Fn::Sub: arn:aws:s3:::${UserFileBucket}/public/*
          - Fn::Join:
            - ''
            - - Fn::Sub: arn:aws:s3:::${UserFileBucket}
              - /protected/${cognito-identity.amazonaws.com:sub}/*
          - Fn::Join:
            - ''
            - - Fn::Sub: arn:aws:s3:::${UserFileBucket}
              - /private/${cognito-identity.amazonaws.com:sub}/*
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            Fn::Sub: arn:aws:s3:::${UserFileBucket}/uploads/*
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${UserFileBucket}/protected/*
        - Effect: Allow
          Action:
          - s3:ListBucket
          Resource:
            Fn::Sub: arn:aws:s3:::${UserFileBucket}
          Condition:
            StringLike:
              s3:prefix:
              - public/
              - public/*
              - protected/
              - protected/*
              - private/${cognito-identity.amazonaws.com:sub}/
              - private/${cognito-identity.amazonaws.com:sub}/*
      Roles:
      - Fn::Sub: ${AmplifyStackName}-authRole
  UserFileBucketUnauthRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:PutObject
          - s3:DeleteObject
          Resource:
            Fn::Sub: arn:aws:s3:::${UserFileBucket}/public/*
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            Fn::Sub: arn:aws:s3:::${UserFileBucket}/uploads/*
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${UserFileBucket}/protected/*
        - Effect: Allow
          Action:
          - s3:ListBucket
          Resource:
            Fn::Sub: arn:aws:s3:::${UserFileBucket}
          Condition:
            StringLike:
              s3:prefix:
              - public/
              - public/*
              - protected/
              - protected/*
      Roles:
      - Fn::Sub: ${AmplifyStackName}-unauthRole
Outputs:
  ApiURL:
    Description: API endpoint URL for Prod environment
    Value:
      Fn::Sub: https://${DocumentScannerAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod
  UserFileBucket:
    Description: Bucket name
    Value:
      Ref: UserFileBucket
  Region:
    Description: Region where the backend is deployed
    Value:
      Ref: AWS::Region
